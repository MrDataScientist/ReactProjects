'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectSpyInMutation = exports.stubQueryWith = exports.createApolloClient = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactApollo = require('react-apollo');

var ReactApollo = _interopRequireWildcard(_reactApollo);

var _apolloClient = require('apollo-client');

var _apolloLinkHttp = require('apollo-link-http');

var _apolloCacheInmemory = require('apollo-cache-inmemory');

var _printer = require('graphql/language/printer');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createApolloClient = exports.createApolloClient = function createApolloClient(uri) {
  var httpLink = new _apolloLinkHttp.HttpLink({
    uri: uri
  });

  var cache = new _apolloCacheInmemory.InMemoryCache({ addTypename: false });

  return new _apolloClient.ApolloClient({
    link: httpLink,
    cache: cache
  });
};

var stubQueryWith = exports.stubQueryWith = function stubQueryWith(uri, payload, result) {
  var promise = Promise.resolve({
    text: function text() {
      return Promise.resolve(JSON.stringify({ data: result }));
    }
  });

  var args = {
    method: 'POST',
    headers: { accept: '*/*', 'content-type': 'application/json' },
    credentials: undefined,
    body: JSON.stringify({
      operationName: payload.operationName || null,
      variables: payload.variables || {},
      query: (0, _printer.print)(payload.query)
    })
  };

  _sinon2.default.stub(global, 'fetch').withArgs(uri, args).returns(promise);

  return promise;
};

var injectSpyInMutation = exports.injectSpyInMutation = function injectSpyInMutation() {
  var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var spy = _sinon2.default.spy();

  ReactApollo.Mutation = function (_ref) {
    var mutation = _ref.mutation,
        variables = _ref.variables,
        children = _ref.children;
    return _react2.default.createElement(
      'div',
      null,
      children(function () {
        return spy({ mutation: mutation, variables: variables });
      }, result)
    );
  };

  jest.setMock('react-apollo', ReactApollo);

  return spy;
};